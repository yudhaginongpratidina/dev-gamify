import { createSlice, PayloadAction } from "@reduxjs/toolkit"; // Importing necessary functions and types from Redux Toolkit

interface AuthState {
    isAuthenticated: boolean;   // Indicates if the user is authenticated
    isError: boolean;           // Indicates if there was an error
    isLoading: boolean;         // Indicates if a request is in progress
    message: string;            // Message to display (e.g., error or success message)
    role: string;               // Role of the authenticated user
}

// Initial state for the authentication slice
const initialState: AuthState = {
    isAuthenticated: false,     // Not authenticated initially
    isError: false,             // No error initially
    isLoading: false,           // No request in progress initially
    message: "",                // No message initially
    role: "",                   // No role initially
}

// Create a slice for authentication with actions and reducers
const authSlice = createSlice({
    name: "auth",               // Name of the slice
    initialState,               // Initial state for the slice
    reducers: {                 // Reducers to handle actions
        loginSuccess: (state, action: PayloadAction<string>) => {
            state.isAuthenticated = true;                           // Set isAuthenticated to true
            state.isLoading = false;                                // Set loading to false
            state.isError = false;                                  // Set error to false
            state.message = action.payload;                         // Set the message from the action payload
        },
        loginFailed: (state, action: PayloadAction<string>) => {
            state.isAuthenticated = false;                          // Set isAuthenticated to false
            state.isLoading = false;                                // Set loading to false
            state.isError = true;                                   // Set error to true
            state.message = action.payload;                         // Set the message from the action payload
        },
        registerSuccess: (state, action: PayloadAction<string>) => {
            state.isAuthenticated = true;                           // Set isAuthenticated to true
            state.isLoading = false;                                // Set loading to false
            state.isError = false;                                  // Set error to false
            state.message = action.payload;                         // Set the message from the action payload
        },
        registerFailed: (state, action: PayloadAction<string>) => {
            state.isAuthenticated = false;                          // Set isAuthenticated to false
            state.isLoading = false;                                // Set loading to false
            state.isError = true;                                   // Set error to true
            state.message = action.payload;                         // Set the message from the action payload
        },
        setRole: (state, action: PayloadAction<string>) => {         // Action to set the role
            state.role = action.payload;                            // Set the role from the action payload
        },
        clearMessage: (state) => {
            state.message = "";                                     // Clear the message
            state.isError = false;                                  // Set error to false
            state.isLoading = false;                                // Set loading to false
        },
        logout: (state) => {
            state.isAuthenticated = false;                          // Set isAuthenticated to false
            state.isLoading = false;                                // Set loading to false
            state.isError = false;                                  // Set error to false
            state.message = "";                                     // Clear the message
            state.role = "";                                        // Clear the role
        }
    },
});

// Export the action creators generated by createSlice
export const { loginSuccess, loginFailed, registerSuccess, registerFailed, setRole, clearMessage, logout } = authSlice.actions;

// Export the reducer to be used in the store
export default authSlice.reducer;