generator client {
    provider = "prisma-client-js"   // Specifies the Prisma Client as the generator
}

datasource db {
    provider = "mysql"              // Specifies MySQL as the database provider
    url      = env("DATABASE_URL")  // Database connection URL from environment variable
}

enum Role {
    user       // Regular user role
    instructor // Instructor user role
    admin      // Admin user role
}

enum Level {
    beginner        // Beginner level
    intermediate    // Intermediate level
    advanced        // Advanced level
}

// Model definition for the User table
model User {
    id        Int      @id @default(autoincrement())    // Primary key with auto-increment
    fullname  String                                    // Full name of the user
    email     String   @unique                          // Unique email address
    password  String                                    // User password
    role      Role     @default(user)                   // User role with default value 'user'
    exp       Int      @default(0)                      // User experience points
    point     Int      @default(0)                      // User reward points
    createdAt DateTime @default(now())                  // Timestamp for when the user was created
    updatedAt DateTime @updatedAt                       // Timestamp for when the user was last updated
    deleted   Boolean  @default(false)                  // Soft delete flag with default value 'false'

    // Relationship with the Class table
    classes   Class[]  // One-to-many relationship with the Class model
}

// Model definition for the Class table
model Class {
    id          Int         @id @default(autoincrement())    // Primary key with auto-increment
    authorId    Int                                          // Foreign key referencing the User table
    title       String                                       // Module title
    level       Level       @default(beginner)               // Module level with default value 'beginner'
    pointUnlock Int         @default(0)                      // Point required to unlock the module
    createdAt   DateTime    @default(now())                  // Timestamp for when the module was created
    updatedAt   DateTime    @updatedAt                       // Timestamp for when the module was last updated
    deleted     Boolean     @default(false)                  // Soft delete flag with default value 'false'

    // Relationship with the User table
    author    User     @relation(fields: [authorId], references: [id])

    // Relationship with the Chapter table
    chapters  Chapter[] // One-to-many relationship with Chapter model
}

// Model definition for the Chapter table
model Chapter {
    // general
    id              Int         @id @default(autoincrement())    // Primary key with auto-increment
    classId         Int                                          // Foreign key referencing the Class table
    title           String                                       // Chapter title
    content         String      @db.Text                         // Chapter content
    pointExperience Int         @default(0)                      // Point required to unlock the chapter
    pointReward     Int         @default(0)                      // Point reward for completing the chapter
    
    // Pilihan ganda
    question        String                                       // Pertanyaan pilihan ganda
    optionA         String                                       // Pilihan A
    optionB         String                                       // Pilihan B
    optionC         String                                       // Pilihan C
    optionD         String                                       // Pilihan D
    correctAnswer   String                                       // Jawaban yang benar (A/B/C/D)

    // Timestamp
    createdAt       DateTime    @default(now())                  // Timestamp for when the chapter was created
    updatedAt       DateTime    @updatedAt                       // Timestamp for when the chapter was last updated
    deleted         Boolean     @default(false)                  // Soft delete flag with default value 'false'
    
    // Relationship with the Class table
    class           Class       @relation(fields: [classId], references: [id])
}
